When would you want to use a remote repository rather than keeping all your work local?

You would want to use a remote repository when you are collaborating with other people 
on a project, or when you want to work from two different computers and push all your 
changes to one place.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

You might want to pull changes manually because you might have made changes to your master 
branch since you last pushed it and another user might have made changes to the one in the 
remote repository, so they will have diverged, and pulling changes will override your 
changes to the local master.

Describe the differences between forks, clones, and branches. When wuld you use one instead 
of another.

A fork is a clone that is made on GitHub. A clone is code that you pull down from GitHub to 
your own machine. A branch is a label for code that is not part of the master version of the 
code.
You use a fork when you want to make a copy of someone else's repository directly on the 
GitHub servers. A clone is used when you want to pull a repository that is on GitHub down to 
your local machine. A branch is used when you want to create separate commits that don't 
affect the main branch if you wanted to try out some experimental feature.

What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit is that if you are collaborating with someone, you can work offline with the most 
updated version, like when you need to take a plane and can't access the remote version of the 
repository.

How would you collaborate without using Git or GitHub? What would be easier, and what would 
be harder?

Without using Git or GitHub you would have to send files back and forth to each other or 
you would have to use a tool like DropBox which doesn't work offline or allow you to commit 
at only at logic points.

It would be easier because you wouldn't have to be careful with 
merging and overwritting code accidentally. It would be harder because you wouldn't have an 
easy way for people to review your code and make suggestions, or add another branch that 
could be merged later with the master branch with a pull request.

When would you want to make changes in a separate branch rather than directly in master? What 
benefit does each approach have?

You would want to make changes in master when you are working alone or with one or two other 
people. You would want to make changes in a separate branch when you are working with a large 
group of people because you can see which changes have already been reviewed and approved.
